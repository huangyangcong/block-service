// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/huangyangcong/block-service/internal/biz"
	"github.com/huangyangcong/block-service/internal/conf"
	"github.com/huangyangcong/block-service/internal/data"
	"github.com/huangyangcong/block-service/internal/schedule"
	"github.com/huangyangcong/block-service/internal/server"
	"github.com/huangyangcong/block-service/internal/service"
	"github.com/huangyangcong/block-service/internal/util"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, confData *conf.Data, trace *conf.Trace, registry *conf.Registry, email *conf.Email, logger log.Logger) (*kratos.App, func(), error) {
	registryRegistry, err := server.NewRegister(registry)
	if err != nil {
		return nil, nil, err
	}
	db := data.NewDB(confData, logger)
	dataData, cleanup, err := data.NewData(db, logger)
	if err != nil {
		return nil, nil, err
	}
	greeterRepo := data.NewGreeterRepo(dataData, logger)
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, logger)
	greeterService := service.NewGreeterService(greeterUsecase, logger)
	httpServer := server.NewHTTPServer(confServer, greeterService)
	tracerProvider, err := server.NewTracerProvider(trace)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	grpcServer := server.NewGRPCServer(tracerProvider, confServer, logger, greeterService)
	scheduleServer := schedule.NewScheduleServer(logger)
	emailNotify := util.NewEmailNotify(email)
	boxPrice := schedule.NewBoxPrice(scheduleServer, emailNotify)
	router := schedule.NewRouter(boxPrice)
	app := newApp(logger, registryRegistry, httpServer, grpcServer, scheduleServer, router)
	return app, func() {
		cleanup()
	}, nil
}
